---
name: build
description: Build Action

inputs:
  docker_image:
    required: true
    description: Docker image for build

runs:
  using: 'composite'
  steps:
    - name: Clone meta-ar
      shell: bash
      run: |
        # Clone the meta-ar repository
        cd ${{ github.workspace }}/..
        # Check if the directory already exists
        if [ -d "meta-ar" ]; then
          echo "Directory meta-ar already exists. Pulling latest changes."
          cd meta-ar
          git reset --hard origin/main
          git pull origin main
        else
          echo "Directory meta-ar does not exist. Cloning repository."
          git clone https://github.com/Audioreach/meta-ar.git
        fi

    - name: Build Project
      id: build
      shell: bash
      run: |
        # Load the build arguments
        set +x

        # Apply patch
        git apply ../meta-ar/recipes/audio/audioreach-graphservices/0001-ar_osal-update-msm_audio.h-header-include-path.patch

        # Build inside a docker container
        docker run \
          --rm \
          --user $(id -u):$(id -g) \
          -v $PWD:$PWD \
          -w $PWD \
          -e "GITHUB_WORKSPACE=${{ github.workspace }}" \
          -e "BUILD_ARGS=${{ env.build_args }}" \
          --privileged \
          ${{ inputs.docker_image }} \
          bash -c "
            source ./install/environment-setup-armv8-2a-poky-linux
            autoreconf -Wcross --verbose --install --force --exclude=autopoint
            autoconf --force

            # fetch the kernel_version
            kernel_version=\$(ls \${GITHUB_WORKSPACE}/install/sysroots/armv8-2a-poky-linux/usr/lib/modules/ | sort -V | tail -n 1)
            echo \"Using Kernel version: \$kernel_version\"

            # Run the configure script with the specified arguments
            ./configure CFLAGS=\"-Wno-int-conversion\" \${BUILD_ARGS} --with-sanitized-headers=\${GITHUB_WORKSPACE}/install/sysroots/armv8-2a-poky-linux/usr/lib/modules/\$kernel_version/build/include/uapi/sound/qcom
            # make
            make DESTDIR=\${GITHUB_WORKSPACE}/build install
            "

    - name: Create build.tar
      id: create_build_tar
      shell: bash
      run: |
        # Create a tarball of the build directory
        tar -czf build.tar -C ${{ github.workspace }}/build .
        echo "Build tar created at ${{ github.workspace }}/build.tar"

    - name: Upload build.tar
      id: upload_build_tar
      uses: actions/upload-artifact@v4
      with:
        name: build.tar
        path: ${{ github.workspace }}/build.tar
        retention-days: 1
